{{ define "args" -}}
{{ range . }}
                mcp.With{{.Type}}("{{.Name}}",
				mcp.Description("{{.Description}}"),
                {{- if .Required }}
                    mcp.Required(),
                {{- end }}
                {{- if .Enum }}
                    mcp.Enum(
                        {{- range $index, $value := .Enum }}
                            "{{ $value }}",
                        {{- end }}
                    ),
                {{- end }}
				{{- if .Properties }}
					mcp.Properties({{ .Properties }}),
				{{- end }}
				{{- if .Items }}
					mcp.Items({{ .Items }}),
				{{- end }}

                ),
        {{- end }}
{{ end }}
// Code generated by github.com/wimspaargaren/gql-gen-mcp, DO NOT EDIT.
package main

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/wimspaargaren/gql-gen-mcp/graphql"
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// ToolRegistry is a struct that holds the MCPServer, GraphQLClient and all tools.
type ToolRegistry struct {
	MCPServer *server.MCPServer
	GraphQLClient *graphql.Client
}

// NewToolRegistry creates a new ToolRegistry with the given MCPServer and GraphQLClient.
func NewToolRegistry(mcpServer *server.MCPServer, gqlClient *graphql.Client) *ToolRegistry {
	return &ToolRegistry{
		MCPServer: mcpServer,
		GraphQLClient: gqlClient,
	}
}

// RegisterTools registers all tools in the ToolRegistry with the MCPServer.
func (t *ToolRegistry) RegisterTools() {
	// Register each tool with the MCPServer
	{{- range .Tools }}
	t.Register{{.Name | capitalise}}Tool()
	{{- end }}
}

{{ range .Tools }}
// Register{{.Name | capitalise}}Tool {{.Description}}
func (t *ToolRegistry) Register{{.Name | capitalise}}Tool() {
	{{.Name}}Tool := mcp.NewTool("{{.Name}}",
		mcp.WithDescription("{{.Description}}"),
        {{ template "args" .Args }}
        )
	t.MCPServer.AddTool({{.Name}}Tool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		var res map[string]any
		query := `{{.Query}}`
		err := t.GraphQLClient.Call(ctx, graphql.Request{
			Query:         query,
			Variables:     request.Params.Arguments,
			OperationName: "{{.Name}}",
		}, &res)
		if err != nil {
			return nil, fmt.Errorf("failed to call GraphQL API: %w", err)
		}
		b, err := json.Marshal(res)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal response: %w", err)
		}
		return mcp.NewToolResultText(string(b)), nil
	})
}
{{ end }}
